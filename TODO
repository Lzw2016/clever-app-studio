[OK]  1.完成了 Block 的运行时
[OK]  2.Block 支持相互嵌套
[  ]  3.Block 支持插槽和基础指令以及用户自定义指令功能
[OK]  4.Block 嵌套时内层 Block 如何使用外层 Block 的数据好函数
[  ]  5.完成 Block vue 组件封装(wrap)
[  ]  6.Block vue 组件需要支持内部动态更新(内部更新Block配置)
[OK]  7.createStaticVNode 打包后不更新问题。使用自定义封装的 createHtmlVNode 解决
[  ]  8.组件定义时提供类似 ext 的 defaults 属性
[  ]  9.v-model指令的实现
[  ] 10.遇到异常是尽可能多的渲染出内容，需要处理 renderTpl、propsTransform、expTransform 函数的异常
[  ] 11.模版或者表达式计算时使用代理对象，可以访问任何值?
[  ] 12.
[  ] 13.





node
    页面渲染的最小单元，称为“渲染节点”，一个渲染节点在vue中对应一个vnode

block
    包含若干个 node，称为“渲染块”，一个渲染块在vue中对应一个vue组件定义，运行时对应一个vue组件实例

node 与 block
    node不能不能单独存在，必须定义在block中。node和block都支持嵌套，并且支持相互混合嵌套。
    node和block都可以定义ref属性，在运行时通过ref属性名能获取到他们的实例。
    block可以通过$refs访问所有子node和block实例

所有函数的this
    指向当前当前所属block对应的vue组件实例

tpl数据范围(优先级由上到下)
     1.this指向当前tpl所属block对应的vue组件实例
     2.包含当前tpl的node的props(计算后的props)
     3.lodash 对象 _ 属性
     4.当前node所属block对应的vue实例 $block 属性
     5.自定义扩展属性 $allBlock
     6.for指令中的数据，通过 index、item 配置的属性名
     7.当前node所属block对应的vue实例平铺的 methods 函数
     8.当前node所属block对应的vue实例平铺的 computed 数据
     9.当前node所属block对应的vue实例的 $props、$attrs、$data、$root、$parent、$slots、$refs、$el、$emit、$forceUpdate 属性
    10.当前node所属block对应的vue实例平铺的 $props 和 $data 数据

props表达式的数据范围(优先级由上到下)
    1.this指向当前tpl所属block对应的vue组件实例
    2.lodash 对象 _ 属性
    3.当前node所属block对应的vue实例 $block 属性
    4.自定义扩展属性 $allBlock
    5.for指令中的数据，通过 index、item 配置的属性名
    6.当前node所属block对应的vue实例平铺的 methods 函数
    7.当前node所属block对应的vue实例平铺的 computed 数据
    8.当前node所属block对应的vue实例的 $props、$attrs、$data、$root、$parent、$slots、$refs、$el、$emit、$forceUpdate 属性
    9.当前node所属block对应的vue实例平铺的 $props 和 $data 数据











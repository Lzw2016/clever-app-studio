node
    页面渲染的最小单元，称为“渲染节点”，一个渲染节点在vue中对应一个vnode

block
    包含若干个 node，称为“渲染块”，一个渲染块在vue中对应一个vue组件定义，运行时对应一个vue组件实例

node 与 block
    node不能不能单独存在，必须定义在block中。node和block都支持嵌套，并且支持相互混合嵌套。
    node和block都可以定义ref属性，在运行时通过ref属性名能获取到他们的实例。
    block可以通过$refs访问所有子node和block实例

所有函数的this
    指向当前当前所属block对应的vue组件实例

props表达式的数据范围(优先级由上到下)
    1.this指向当前tpl所属block对应的vue组件实例
    2.lodash 对象 _ 属性
    3.当前node所属block对应的vue实例 $block 属性
    4.自定义扩展属性 $allBlock $slotProps
    5.for指令中的数据，通过 index、item 配置的属性名
    6.当前node所属block对应的vue实例平铺的 methods 函数
    7.当前node所属block对应的vue实例平铺的 computed 数据
    8.当前node所属block对应的vue实例的 $props、$attrs、$data、$root、$parent、$slots、$refs、$el、$emit、$forceUpdate 属性
    9.当前node所属block对应的vue实例平铺的 $props 和 $data 数据

tpl数据范围(优先级由上到下)
     1.this指向当前tpl所属block对应的vue组件实例
     2.包含当前tpl的node的props(计算后的props)
     3.lodash 对象 _ 属性
     4.当前node所属block对应的vue实例 $block 属性
     5.自定义扩展属性 $allBlock $slotProps
     6.for指令中的数据，通过 index、item 配置的属性名
     7.当前node所属block对应的vue实例平铺的 methods 函数
     8.当前node所属block对应的vue实例平铺的 computed 数据
     9.当前node所属block对应的vue实例的 $props、$attrs、$data、$root、$parent、$slots、$refs、$el、$emit、$forceUpdate 属性
    10.当前node所属block对应的vue实例平铺的 $props 和 $data 数据

表达式语法
    1.必须以“{{”开头且以“}}”结尾，中间的内容就是表达式内容
    2.支持多个语句，语句的结束使用“;”
    3.表达式值就是最后一个语句的值
    4.大多数场景只有一条语句，如：“{{ exp_content }}”
    5.表达式内部支持调用函数，表达式上下文详见：“props表达式的数据范围”

模版语法
    1.<%= exp_content %>：输出变量
    2.<%- exp_content %>：html转义输出变量
    3.<%  exp_content %>：js语句逻辑
    4.详情：https://www.lodashjs.com/docs/lodash.template#_templatestring-options

基于DesignBlock创建的vue组件的实例扩展了以下属性/函数
    1.global：       创建 BlockComponent 时的全局上下文对象
    2.blockOps：     Block支持的操作函数(基于ref属性)
    2.blockOpsById： Block支持的操作函数(基于id属性)

组件拖渲染/拽时的自定义html标签属性
    1.组件通过配置ComponentMeta.placeholder属性来支持拖拽时容纳子节点或者插槽节点
    2.所有的渲染节点包含的属性：data-component-type、data-node-id、data-node-ref、data-node-parent-id
    3.容器组件渲染时，可以拖拽组件到容器指定占位位置的节点包含的属性：data-placeholder-name (仅设计时才会有的属性)
    4.如果节点在一个容器组件中，那么这个节点在包含属性：data-slot-name (仅设计时才会有的属性)
    5.注意：要求每个组件需要一个根dom节点来承载这些属性，如果原生组件不支持，可以做一个简单封装

拖拽设计器选中组件算法
    1.根据鼠标事件获取所属容器组件，基于event.target dom往外层找，找到最近的含有data-node-id属性的dom即可找到渲染节点，关键代码：target.closest('[data-node-ref]')
    2.根据data-node-ref值获取当前组件的dom对象、RuntimeNode、MaterialMeta
    3.前端显示选中效果(hover和click)

拖拽设计器拖拽定位算法
    1.根据鼠标事件获取所属容器组件，基于event.target dom往外层找，找到最近的含有data-node-id属性的dom即可找到渲染节点，关键代码：target.closest('[data-node-id]')
    2.根据data-node-id值获取RuntimeNode对象，根据其__designPlaceholder值得到当前容器中的可拖拽位置，关键代码：target.querySelectorAll('[data-node-parent-id=xxx]')
    3.如果没有__designPlaceholder属性，表示当前渲染节点不是容器组件，那就继续往外层找，重复1、2流程直到找出容器组件为止
    4.根据“当前鼠标所处的位置”和“容器组件中已经渲染节点(子节点和插槽)的位置和大小”计算出新插入的节点的放置位置

拖拽设计器拖拽放置组件页面更新流程
     1.根据pageId获取page对应的DesignBlock对象
     2.根据DesignBlock对象渲染(RuntimeBlock.vue)
     3.拖拽/配置 -> 更新渲染(RuntimeBlock.vue)
     4.更新DesignBlock对象
     5.保存DesignBlock对象历史
     6.重复3~5步骤
     7.直接编辑DesignBlock对象代码
     8.更新渲染(RuntimeBlock.vue)
     9.保存DesignBlock对象历史
    10.重复7~9步骤

组件、物料、组件元数据说明
    1.组件：       运行时需要的，本质就是一个标准的vue组件对象
    2.物料：       在设计器的物料面板上显示的组件信息，一个物料就是一个组件的最基本的信息
    3.组件元数据：  主要用来描述在设计时组件有哪些可以配置的属性、事件、生命周期、插槽等元信息
    4.注册流程：    组件(动态注册) -> 物料(全量注册) -> 组件元数据(动态注册) 运行时只需要注册组件
